//Phase 4

(gdb) b phase_4
Breakpoint 1 at 0x40100e
(gdb) b explode_bomb
Breakpoint 2 at 0x401438
(gdb) r phase.txt
Starting program: /mnt/d/5th Semester/Computer System I (ITS304)/New folder/Assignment 1/bomb002/bomb phase.txt
Welcome to my fiendish little bomb. You have 6 phases with
which to blow yourself up. Have a nice day!
Phase 1 defused. How about the next one?
That's number 2.  Keep going!
Halfway there!
1 3                                                                           //User input;

Breakpoint 1, 0x000000000040100e in phase_4 ()
(gdb) disas
Dump of assembler code for function phase_4:
=> 0x000000000040100e <+0>:     sub    $0x18,%rsp
   0x0000000000401012 <+4>:     mov    %fs:0x28,%rax
   0x000000000040101b <+13>:    mov    %rax,0x8(%rsp)
   0x0000000000401020 <+18>:    xor    %eax,%eax
   0x0000000000401022 <+20>:    mov    %rsp,%rcx
   0x0000000000401025 <+23>:    lea    0x4(%rsp),%rdx                      
   0x000000000040102a <+28>:    mov    $0x4025b7,%esi                           //The input format is being moved to $esi (%d %d);
   0x000000000040102f <+33>:    callq  0x400bb0 <__isoc99_sscanf@plt>
   0x0000000000401034 <+38>:    cmp    $0x2,%eax                                //$eax=2, number of input given;
                                                                                //since there is 2 inputs given, it will jump over the bomb;
   0x0000000000401037 <+41>:    jne    0x401044 <phase_4+54>
   0x0000000000401039 <+43>:    mov    (%rsp),%eax                              //$rsp contains the second user input, i.e. $eax=3;
   0x000000000040103c <+46>:    sub    $0x2,%eax                                //2 is being subtracted from $eax, now $eax=1;
   0x000000000040103f <+49>:    cmp    $0x2,%eax                                //$eax is being compared with 2;
   0x0000000000401042 <+52>:    jbe    0x401049 <phase_4+59>                    //since $eax is less than 2, it will jump over the bomb
   0x0000000000401044 <+54>:    callq  0x401438 <explode_bomb>
   0x0000000000401049 <+59>:    mov    (%rsp),%esi                               //$rsp contains the second user input and isnow stored in $esi;
   0x000000000040104c <+62>:    mov    $0x5,%edi                                 //5 is stored in $edi
   0x0000000000401051 <+67>:    callq  0x400fd3 <func4>
   0x0000000000401056 <+72>:    cmp    0x4(%rsp),%eax                            //first user input (1) is compared with $eax;
   0x000000000040105a <+76>:    je     0x401061 <phase_4+83>                     //the first value is found if it is equal;
   0x000000000040105c <+78>:    callq  0x401438 <explode_bomb>
   0x0000000000401061 <+83>:    mov    0x8(%rsp),%rax
   0x0000000000401066 <+88>:    xor    %fs:0x28,%rax
   0x000000000040106f <+97>:    je     0x401076 <phase_4+104>
   0x0000000000401071 <+99>:    callq  0x400b00 <__stack_chk_fail@plt>
--Type <RET> for more, q to quit, c to continue without paging--
   0x0000000000401076 <+104>:   add    $0x18,%rsp
   0x000000000040107a <+108>:   retq
End of assembler dump.

(gdb) i r
rax            0x2                 2                                    //Value of $eax
rbx            0x7ffffffee258      140737488282200
rcx            0x0                 0
rdx            0x7ffffffee140      140737488281920
rsi            0x0                 0
rdi            0x7ffffffedaf0      140737488280304
rbp            0x0                 0x0
rsp            0x7ffffffee140      0x7ffffffee140                       //reads the User Input in reverse order, i.e. 3,1
r8             0xffffffff          4294967295
r9             0x0                 0
r10            0x7fffff73eac0      140737479174848
r11            0x0                 0
r12            0x400c60            4197472
r13            0x7ffffffee250      140737488282192
r14            0x0                 0
r15            0x0                 0
rip            0x401034            0x401034 <phase_4+38>
eflags         0x202               [ IF ]
cs             0x33                51
ss             0x2b                43
ds             0x0                 0
es             0x0                 0
fs             0x0                 0
gs             0x0                 0


(gdb) u* 0x000000000040103f
0x000000000040103f in phase_4 ()
(gdb) disas
Dump of assembler code for function phase_4:
   0x000000000040100e <+0>:     sub    $0x18,%rsp
   0x0000000000401012 <+4>:     mov    %fs:0x28,%rax
   0x000000000040101b <+13>:    mov    %rax,0x8(%rsp)
   0x0000000000401020 <+18>:    xor    %eax,%eax
   0x0000000000401022 <+20>:    mov    %rsp,%rcx
   0x0000000000401025 <+23>:    lea    0x4(%rsp),%rdx
   0x000000000040102a <+28>:    mov    $0x4025b7,%esi
   0x000000000040102f <+33>:    callq  0x400bb0 <__isoc99_sscanf@plt>
   0x0000000000401034 <+38>:    cmp    $0x2,%eax
   0x0000000000401037 <+41>:    jne    0x401044 <phase_4+54>
   0x0000000000401039 <+43>:    mov    (%rsp),%eax
   0x000000000040103c <+46>:    sub    $0x2,%eax
=> 0x000000000040103f <+49>:    cmp    $0x2,%eax                                //value of $eax is lower than 2, so it will jump over the bomb;
   0x0000000000401042 <+52>:    jbe    0x401049 <phase_4+59>
   0x0000000000401044 <+54>:    callq  0x401438 <explode_bomb>
   0x0000000000401049 <+59>:    mov    (%rsp),%esi
   0x000000000040104c <+62>:    mov    $0x5,%edi
   0x0000000000401051 <+67>:    callq  0x400fd3 <func4>
   0x0000000000401056 <+72>:    cmp    0x4(%rsp),%eax
   0x000000000040105a <+76>:    je     0x401061 <phase_4+83>
   0x000000000040105c <+78>:    callq  0x401438 <explode_bomb>
   0x0000000000401061 <+83>:    mov    0x8(%rsp),%rax
   0x0000000000401066 <+88>:    xor    %fs:0x28,%rax
   0x000000000040106f <+97>:    je     0x401076 <phase_4+104>
   0x0000000000401071 <+99>:    callq  0x400b00 <__stack_chk_fail@plt>
--Type <RET> for more, q to quit, c to continue without paging--
   0x0000000000401076 <+104>:   add    $0x18,%rsp
   0x000000000040107a <+108>:   retq
End of assembler dump.
(gdb) i r
rax            0x1                 1                                            //value of $eax;
rbx            0x7ffffffee258      140737488282200
rcx            0x0                 0
rdx            0x7ffffffee140      140737488281920
rsi            0x0                 0
rdi            0x7ffffffedaf0      140737488280304
rbp            0x0                 0x0
rsp            0x7ffffffee140      0x7ffffffee140
r8             0xffffffff          4294967295
r9             0x0                 0
r10            0x7fffff73eac0      140737479174848
r11            0x0                 0
r12            0x400c60            4197472
r13            0x7ffffffee250      140737488282192
r14            0x0                 0
r15            0x0                 0
rip            0x40103f            0x40103f <phase_4+49>
eflags         0x202               [ IF ]
cs             0x33                51
ss             0x2b                43
ds             0x0                 0
es             0x0                 0
fs             0x0                 0
gs             0x0                 0
(gdb)

(gdb) u* 0x0000000000401056
0x0000000000401056 in phase_4 ()
(gdb) disas
Dump of assembler code for function phase_4:
   0x000000000040100e <+0>:     sub    $0x18,%rsp
   0x0000000000401012 <+4>:     mov    %fs:0x28,%rax
   0x000000000040101b <+13>:    mov    %rax,0x8(%rsp)
   0x0000000000401020 <+18>:    xor    %eax,%eax
   0x0000000000401022 <+20>:    mov    %rsp,%rcx
   0x0000000000401025 <+23>:    lea    0x4(%rsp),%rdx
   0x000000000040102a <+28>:    mov    $0x4025b7,%esi
   0x000000000040102f <+33>:    callq  0x400bb0 <__isoc99_sscanf@plt>
   0x0000000000401034 <+38>:    cmp    $0x2,%eax
   0x0000000000401037 <+41>:    jne    0x401044 <phase_4+54>
   0x0000000000401039 <+43>:    mov    (%rsp),%eax
   0x000000000040103c <+46>:    sub    $0x2,%eax
   0x000000000040103f <+49>:    cmp    $0x2,%eax
   0x0000000000401042 <+52>:    jbe    0x401049 <phase_4+59>
   0x0000000000401044 <+54>:    callq  0x401438 <explode_bomb>
   0x0000000000401049 <+59>:    mov    (%rsp),%esi
   0x000000000040104c <+62>:    mov    $0x5,%edi
   0x0000000000401051 <+67>:    callq  0x400fd3 <func4>
=> 0x0000000000401056 <+72>:    cmp    0x4(%rsp),%eax                               //$rsp+4 is the first user input and it is compared to $eax;
   0x000000000040105a <+76>:    je     0x401061 <phase_4+83>
   0x000000000040105c <+78>:    callq  0x401438 <explode_bomb>
   0x0000000000401061 <+83>:    mov    0x8(%rsp),%rax
   0x0000000000401066 <+88>:    xor    %fs:0x28,%rax
   0x000000000040106f <+97>:    je     0x401076 <phase_4+104>
   0x0000000000401071 <+99>:    callq  0x400b00 <__stack_chk_fail@plt>
--Type <RET> for more, q to quit, c to continue without paging--
   0x0000000000401076 <+104>:   add    $0x18,%rsp
   0x000000000040107a <+108>:   retq
End of assembler dump.
(gdb) x/d $rsp
0x7ffffffee140: 3
(gdb) x/d $rsp+4
0x7ffffffee144: 1
(gdb) i r
rax            0x24                36                                   //Value of $eax, the expected answer;
rbx            0x7ffffffee258      140737488282200
rcx            0x0                 0
rdx            0x7ffffffee140      140737488281920
rsi            0x3                 3
rdi            0x1                 1
rbp            0x0                 0x0
rsp            0x7ffffffee140      0x7ffffffee140
r8             0xffffffff          4294967295
r9             0x0                 0
r10            0x7fffff73eac0      140737479174848
r11            0x0                 0
r12            0x400c60            4197472
r13            0x7ffffffee250      140737488282192
r14            0x0                 0
r15            0x0                 0
rip            0x401056            0x401056 <phase_4+72>
eflags         0x216               [ PF AF IF ]
cs             0x33                51
ss             0x2b                43
ds             0x0                 0
es             0x0                 0
fs             0x0                 0
gs             0x0                 0
(gdb)

(gdb) x/d 0x7ffffffee140
0x7ffffffee140: 3                                                         //The second expected answer

(gdb) delete
Delete all breakpoints? (y or n) y
(gdb) r
The program being debugged has been started already.
Start it from the beginning? (y or n) y
Starting program: /mnt/d/5th Semester/Computer System I (ITS304)/New folder/Assignment 1/bomb002/bomb phase.txt
Welcome to my fiendish little bomb. You have 6 phases with
which to blow yourself up. Have a nice day!
Phase 1 defused. How about the next one?
That's number 2.  Keep going!
Halfway there!
36 3
So you got that one.  Try this one.

Answer 36 3
