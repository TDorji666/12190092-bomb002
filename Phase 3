//This phase requires us to input two integers with space in between. The first input should pass some tests and the second input should match the correct answer.

//Phase 3

tshery@MSI:/mnt/d/5th Semester/Computer System I (ITS304)/New folder/Assignment 1/bomb002$ gdb bomb
GNU gdb (Ubuntu 9.2-0ubuntu1~20.04) 9.2
Copyright (C) 2020 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.
Type "show copying" and "show warranty" for details.
This GDB was configured as "x86_64-linux-gnu".
Type "show configuration" for configuration details.
For bug reporting instructions, please see:
<http://www.gnu.org/software/gdb/bugs/>.
Find the GDB manual and other documentation resources online at:
    <http://www.gnu.org/software/gdb/documentation/>.

For help, type "help".
Type "apropos word" to search for commands related to "word"...
Reading symbols from bomb...
(gdb) b phase_3									//breakpoints
Breakpoint 1 at 0x400f0d
(gdb) r phase1.txt								//Using the saved answers
Starting program: /mnt/d/5th Semester/Computer System I (ITS304)/New folder/Assignment 1/bomb002/bomb phase1.txt
Welcome to my fiendish little bomb. You have 6 phases with
which to blow yourself up. Have a nice day!
Phase 1 defused. How about the next one?
That's number 2.  Keep going!							
hi										//test answer

Breakpoint 1, 0x0000000000400f0d in phase_3 ()
(gdb) disas
Dump of assembler code for function phase_3:
=> 0x0000000000400f0d <+0>:     sub    $0x18,%rsp
   0x0000000000400f11 <+4>:     mov    %fs:0x28,%rax
   0x0000000000400f1a <+13>:    mov    %rax,0x8(%rsp)
   0x0000000000400f1f <+18>:    xor    %eax,%eax
   0x0000000000400f21 <+20>:    lea    0x4(%rsp),%rcx
   0x0000000000400f26 <+25>:    mov    %rsp,%rdx
   0x0000000000400f29 <+28>:    mov    $0x4025b7,%esi
   0x0000000000400f2e <+33>:    callq  0x400bb0 <__isoc99_sscanf@plt>
   0x0000000000400f33 <+38>:    cmp    $0x1,%eax					//Compare statement 1. The input is compared with 1.
   0x0000000000400f36 <+41>:    jg     0x400f3d <phase_3+48>				//If the input is greater than 1, it jumps over the bomb.			
   0x0000000000400f38 <+43>:    callq  0x401438 <explode_bomb>
   0x0000000000400f3d <+48>:    cmpl   $0x7,(%rsp)					//Compare statement 2. Input is compared with 7.
   0x0000000000400f41 <+52>:    ja     0x400f9e <phase_3+145>				//If input is greater than 7, it will jump to bomb and explode.
   0x0000000000400f43 <+54>:    mov    (%rsp),%eax
   0x0000000000400f46 <+57>:    jmpq   *0x402400(,%rax,8)
   0x0000000000400f4d <+64>:    mov    $0x380,%eax
   0x0000000000400f52 <+69>:    jmp    0x400f59 <phase_3+76>
   0x0000000000400f54 <+71>:    mov    $0x0,%eax
   0x0000000000400f59 <+76>:    sub    $0x3e4,%eax
   0x0000000000400f5e <+81>:    jmp    0x400f65 <phase_3+88>
   0x0000000000400f60 <+83>:    mov    $0x0,%eax
   0x0000000000400f65 <+88>:    add    $0x21e,%eax
   0x0000000000400f6a <+93>:    jmp    0x400f71 <phase_3+100>
   0x0000000000400f6c <+95>:    mov    $0x0,%eax
   0x0000000000400f71 <+100>:   sub    $0x34,%eax
   0x0000000000400f74 <+103>:   jmp    0x400f7b <phase_3+110>
   0x0000000000400f76 <+105>:   mov    $0x0,%eax
   0x0000000000400f7b <+110>:   add    $0x34,%eax
   0x0000000000400f7e <+113>:   jmp    0x400f85 <phase_3+120>
   0x0000000000400f80 <+115>:   mov    $0x0,%eax
   0x0000000000400f85 <+120>:   sub    $0x34,%eax
   0x0000000000400f88 <+123>:   jmp    0x400f8f <phase_3+130>
   0x0000000000400f8a <+125>:   mov    $0x0,%eax
   0x0000000000400f8f <+130>:   add    $0x34,%eax
   0x0000000000400f92 <+133>:   jmp    0x400f99 <phase_3+140>
   0x0000000000400f94 <+135>:   mov    $0x0,%eax
   0x0000000000400f99 <+140>:   sub    $0x34,%eax
   0x0000000000400f9c <+143>:   jmp    0x400fa8 <phase_3+155>
   0x0000000000400f9e <+145>:   callq  0x401438 <explode_bomb>
   0x0000000000400fa3 <+150>:   mov    $0x0,%eax
   0x0000000000400fa8 <+155>:   cmpl   $0x5,(%rsp)					//Compare statement 3
   0x0000000000400fac <+159>:   jg     0x400fb4 <phase_3+167>
   0x0000000000400fae <+161>:   cmp    0x4(%rsp),%eax					//Compare statement 4
   0x0000000000400fb2 <+165>:   je     0x400fb9 <phase_3+172>
   0x0000000000400fb4 <+167>:   callq  0x401438 <explode_bomb>
   0x0000000000400fb9 <+172>:   mov    0x8(%rsp),%rax
   0x0000000000400fbe <+177>:   xor    %fs:0x28,%rax
   0x0000000000400fc7 <+186>:   je     0x400fce <phase_3+193>
--Type <RET> for more, q to quit, c to continue without paging--
   0x0000000000400fc9 <+188>:   callq  0x400b00 <__stack_chk_fail@plt>
   0x0000000000400fce <+193>:   add    $0x18,%rsp
   0x0000000000400fd2 <+197>:   retq
End of assembler dump.

//Going to compare statement 1

(gdb) u *0x0000000000400f29
0x0000000000400f29 in phase_3 ()

(gdb) x/s 0x4025b7
0x4025b7:       "%d %d"

//Examining the value, we now know the what the answer should be in. The answer should be in integer of 2 values with space in between. From the above code we know that
one integer should be greater than 1 but less than 7.
//Trying with the expected answer

tshery@MSI:/mnt/d/5th Semester/Computer System I (ITS304)/New folder/Assignment 1/bomb002$ gdb bomb
GNU gdb (Ubuntu 9.2-0ubuntu1~20.04) 9.2
Copyright (C) 2020 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.
Type "show copying" and "show warranty" for details.
This GDB was configured as "x86_64-linux-gnu".
Type "show configuration" for configuration details.
For bug reporting instructions, please see:
<http://www.gnu.org/software/gdb/bugs/>.
Find the GDB manual and other documentation resources online at:
    <http://www.gnu.org/software/gdb/documentation/>.

For help, type "help".
Type "apropos word" to search for commands related to "word"...
Reading symbols from bomb...
(gdb) b phase_3
Breakpoint 1 at 0x400f0d
(gdb) r phase1.txt
Starting program: /mnt/d/5th Semester/Computer System I (ITS304)/New folder/Assignment 1/bomb002/bomb phase1.txt
Welcome to my fiendish little bomb. You have 6 phases with
which to blow yourself up. Have a nice day!
Phase 1 defused. How about the next one?
That's number 2.  Keep going!
2 35											//test answer 2

Breakpoint 1, 0x0000000000400f0d in phase_3 ()
(gdb) disas
Dump of assembler code for function phase_3:
=> 0x0000000000400f0d <+0>:     sub    $0x18,%rsp
   0x0000000000400f11 <+4>:     mov    %fs:0x28,%rax
   0x0000000000400f1a <+13>:    mov    %rax,0x8(%rsp)
   0x0000000000400f1f <+18>:    xor    %eax,%eax
   0x0000000000400f21 <+20>:    lea    0x4(%rsp),%rcx
   0x0000000000400f26 <+25>:    mov    %rsp,%rdx
   0x0000000000400f29 <+28>:    mov    $0x4025b7,%esi
   0x0000000000400f2e <+33>:    callq  0x400bb0 <__isoc99_sscanf@plt>
   0x0000000000400f33 <+38>:    cmp    $0x1,%eax
   0x0000000000400f36 <+41>:    jg     0x400f3d <phase_3+48>
   0x0000000000400f38 <+43>:    callq  0x401438 <explode_bomb>
   0x0000000000400f3d <+48>:    cmpl   $0x7,(%rsp)
   0x0000000000400f41 <+52>:    ja     0x400f9e <phase_3+145>
   0x0000000000400f43 <+54>:    mov    (%rsp),%eax
   0x0000000000400f46 <+57>:    jmpq   *0x402400(,%rax,8)
   0x0000000000400f4d <+64>:    mov    $0x380,%eax
   0x0000000000400f52 <+69>:    jmp    0x400f59 <phase_3+76>
   0x0000000000400f54 <+71>:    mov    $0x0,%eax
   0x0000000000400f59 <+76>:    sub    $0x3e4,%eax
   0x0000000000400f5e <+81>:    jmp    0x400f65 <phase_3+88>
   0x0000000000400f60 <+83>:    mov    $0x0,%eax
   0x0000000000400f65 <+88>:    add    $0x21e,%eax
   0x0000000000400f6a <+93>:    jmp    0x400f71 <phase_3+100>
   0x0000000000400f6c <+95>:    mov    $0x0,%eax
   0x0000000000400f71 <+100>:   sub    $0x34,%eax
   0x0000000000400f74 <+103>:   jmp    0x400f7b <phase_3+110>
   0x0000000000400f76 <+105>:   mov    $0x0,%eax
   0x0000000000400f7b <+110>:   add    $0x34,%eax
   0x0000000000400f7e <+113>:   jmp    0x400f85 <phase_3+120>
   0x0000000000400f80 <+115>:   mov    $0x0,%eax
   0x0000000000400f85 <+120>:   sub    $0x34,%eax
   0x0000000000400f88 <+123>:   jmp    0x400f8f <phase_3+130>
   0x0000000000400f8a <+125>:   mov    $0x0,%eax
   0x0000000000400f8f <+130>:   add    $0x34,%eax
   0x0000000000400f92 <+133>:   jmp    0x400f99 <phase_3+140>
   0x0000000000400f94 <+135>:   mov    $0x0,%eax
   0x0000000000400f99 <+140>:   sub    $0x34,%eax
   0x0000000000400f9c <+143>:   jmp    0x400fa8 <phase_3+155>
   0x0000000000400f9e <+145>:   callq  0x401438 <explode_bomb>
   0x0000000000400fa3 <+150>:   mov    $0x0,%eax
   0x0000000000400fa8 <+155>:   cmpl   $0x5,(%rsp)
   0x0000000000400fac <+159>:   jg     0x400fb4 <phase_3+167>
   0x0000000000400fae <+161>:   cmp    0x4(%rsp),%eax
   0x0000000000400fb2 <+165>:   je     0x400fb9 <phase_3+172>
   0x0000000000400fb4 <+167>:   callq  0x401438 <explode_bomb>
   0x0000000000400fb9 <+172>:   mov    0x8(%rsp),%rax
   0x0000000000400fbe <+177>:   xor    %fs:0x28,%rax
   0x0000000000400fc7 <+186>:   je     0x400fce <phase_3+193>
--Type <RET> for more, q to quit, c to continue without paging--
   0x0000000000400fc9 <+188>:   callq  0x400b00 <__stack_chk_fail@plt>
   0x0000000000400fce <+193>:   add    $0x18,%rsp
   0x0000000000400fd2 <+197>:   retq
End of assembler dump.

//Going through compare statements to check

(gdb) u *0x0000000000400f33
(gdb) disas
Dump of assembler code for function phase_3:
   0x0000000000400f0d <+0>:     sub    $0x18,%rsp
   0x0000000000400f11 <+4>:     mov    %fs:0x28,%rax
   0x0000000000400f1a <+13>:    mov    %rax,0x8(%rsp)
   0x0000000000400f1f <+18>:    xor    %eax,%eax
   0x0000000000400f21 <+20>:    lea    0x4(%rsp),%rcx
   0x0000000000400f26 <+25>:    mov    %rsp,%rdx
   0x0000000000400f29 <+28>:    mov    $0x4025b7,%esi
   0x0000000000400f2e <+33>:    callq  0x400bb0 <__isoc99_sscanf@plt>
=> 0x0000000000400f33 <+38>:    cmp    $0x1,%eax
   0x0000000000400f36 <+41>:    jg     0x400f3d <phase_3+48>
   0x0000000000400f38 <+43>:    callq  0x401438 <explode_bomb>
   0x0000000000400f3d <+48>:    cmpl   $0x7,(%rsp)
   0x0000000000400f41 <+52>:    ja     0x400f9e <phase_3+145>
   0x0000000000400f43 <+54>:    mov    (%rsp),%eax
   0x0000000000400f46 <+57>:    jmpq   *0x402400(,%rax,8)
   0x0000000000400f4d <+64>:    mov    $0x380,%eax
   0x0000000000400f52 <+69>:    jmp    0x400f59 <phase_3+76>
   0x0000000000400f54 <+71>:    mov    $0x0,%eax
   0x0000000000400f59 <+76>:    sub    $0x3e4,%eax
   0x0000000000400f5e <+81>:    jmp    0x400f65 <phase_3+88>
   0x0000000000400f60 <+83>:    mov    $0x0,%eax
   0x0000000000400f65 <+88>:    add    $0x21e,%eax
   0x0000000000400f6a <+93>:    jmp    0x400f71 <phase_3+100>
   0x0000000000400f6c <+95>:    mov    $0x0,%eax
   0x0000000000400f71 <+100>:   sub    $0x34,%eax
   0x0000000000400f74 <+103>:   jmp    0x400f7b <phase_3+110>
   0x0000000000400f76 <+105>:   mov    $0x0,%eax
   0x0000000000400f7b <+110>:   add    $0x34,%eax
   0x0000000000400f7e <+113>:   jmp    0x400f85 <phase_3+120>
   0x0000000000400f80 <+115>:   mov    $0x0,%eax
   0x0000000000400f85 <+120>:   sub    $0x34,%eax
   0x0000000000400f88 <+123>:   jmp    0x400f8f <phase_3+130>
   0x0000000000400f8a <+125>:   mov    $0x0,%eax
   0x0000000000400f8f <+130>:   add    $0x34,%eax
   0x0000000000400f92 <+133>:   jmp    0x400f99 <phase_3+140>
   0x0000000000400f94 <+135>:   mov    $0x0,%eax
   0x0000000000400f99 <+140>:   sub    $0x34,%eax
   0x0000000000400f9c <+143>:   jmp    0x400fa8 <phase_3+155>
   0x0000000000400f9e <+145>:   callq  0x401438 <explode_bomb>
   0x0000000000400fa3 <+150>:   mov    $0x0,%eax
   0x0000000000400fa8 <+155>:   cmpl   $0x5,(%rsp)
   0x0000000000400fac <+159>:   jg     0x400fb4 <phase_3+167>
   0x0000000000400fae <+161>:   cmp    0x4(%rsp),%eax
   0x0000000000400fb2 <+165>:   je     0x400fb9 <phase_3+172>
   0x0000000000400fb4 <+167>:   callq  0x401438 <explode_bomb>
   0x0000000000400fb9 <+172>:   mov    0x8(%rsp),%rax
   0x0000000000400fbe <+177>:   xor    %fs:0x28,%rax
   0x0000000000400fc7 <+186>:   je     0x400fce <phase_3+193>
--Type <RET> for more, q to quit, c to continue without paging--i r
   0x0000000000400fc9 <+188>:   callq  0x400b00 <__stack_chk_fail@plt>
   0x0000000000400fce <+193>:   add    $0x18,%rsp
   0x0000000000400fd2 <+197>:   retq
End of assembler dump.

//We passed the first compare statement.
//Going through second compare statement.

(gdb) u *0x0000000000400f3d
0x0000000000400f3d in phase_3 ()
(gdb) disas
Dump of assembler code for function phase_3:
   0x0000000000400f0d <+0>:     sub    $0x18,%rsp
   0x0000000000400f11 <+4>:     mov    %fs:0x28,%rax
   0x0000000000400f1a <+13>:    mov    %rax,0x8(%rsp)
   0x0000000000400f1f <+18>:    xor    %eax,%eax
   0x0000000000400f21 <+20>:    lea    0x4(%rsp),%rcx
   0x0000000000400f26 <+25>:    mov    %rsp,%rdx
   0x0000000000400f29 <+28>:    mov    $0x4025b7,%esi
   0x0000000000400f2e <+33>:    callq  0x400bb0 <__isoc99_sscanf@plt>
   0x0000000000400f33 <+38>:    cmp    $0x1,%eax
   0x0000000000400f36 <+41>:    jg     0x400f3d <phase_3+48>
   0x0000000000400f38 <+43>:    callq  0x401438 <explode_bomb>
=> 0x0000000000400f3d <+48>:    cmpl   $0x7,(%rsp)
   0x0000000000400f41 <+52>:    ja     0x400f9e <phase_3+145>
   0x0000000000400f43 <+54>:    mov    (%rsp),%eax
   0x0000000000400f46 <+57>:    jmpq   *0x402400(,%rax,8)
   0x0000000000400f4d <+64>:    mov    $0x380,%eax
   0x0000000000400f52 <+69>:    jmp    0x400f59 <phase_3+76>
   0x0000000000400f54 <+71>:    mov    $0x0,%eax
   0x0000000000400f59 <+76>:    sub    $0x3e4,%eax
   0x0000000000400f5e <+81>:    jmp    0x400f65 <phase_3+88>
   0x0000000000400f60 <+83>:    mov    $0x0,%eax
   0x0000000000400f65 <+88>:    add    $0x21e,%eax
   0x0000000000400f6a <+93>:    jmp    0x400f71 <phase_3+100>
   0x0000000000400f6c <+95>:    mov    $0x0,%eax
   0x0000000000400f71 <+100>:   sub    $0x34,%eax
   0x0000000000400f74 <+103>:   jmp    0x400f7b <phase_3+110>
   0x0000000000400f76 <+105>:   mov    $0x0,%eax
   0x0000000000400f7b <+110>:   add    $0x34,%eax
   0x0000000000400f7e <+113>:   jmp    0x400f85 <phase_3+120>
   0x0000000000400f80 <+115>:   mov    $0x0,%eax
   0x0000000000400f85 <+120>:   sub    $0x34,%eax
   0x0000000000400f88 <+123>:   jmp    0x400f8f <phase_3+130>
   0x0000000000400f8a <+125>:   mov    $0x0,%eax
   0x0000000000400f8f <+130>:   add    $0x34,%eax
   0x0000000000400f92 <+133>:   jmp    0x400f99 <phase_3+140>
   0x0000000000400f94 <+135>:   mov    $0x0,%eax
   0x0000000000400f99 <+140>:   sub    $0x34,%eax
   0x0000000000400f9c <+143>:   jmp    0x400fa8 <phase_3+155>
   0x0000000000400f9e <+145>:   callq  0x401438 <explode_bomb>
   0x0000000000400fa3 <+150>:   mov    $0x0,%eax
   0x0000000000400fa8 <+155>:   cmpl   $0x5,(%rsp)
   0x0000000000400fac <+159>:   jg     0x400fb4 <phase_3+167>
   0x0000000000400fae <+161>:   cmp    0x4(%rsp),%eax
   0x0000000000400fb2 <+165>:   je     0x400fb9 <phase_3+172>
   0x0000000000400fb4 <+167>:   callq  0x401438 <explode_bomb>
   0x0000000000400fb9 <+172>:   mov    0x8(%rsp),%rax
   0x0000000000400fbe <+177>:   xor    %fs:0x28,%rax
   0x0000000000400fc7 <+186>:   je     0x400fce <phase_3+193>
--Type <RET> for more, q to quit, c to continue without paging--
   0x0000000000400fc9 <+188>:   callq  0x400b00 <__stack_chk_fail@plt>
   0x0000000000400fce <+193>:   add    $0x18,%rsp
   0x0000000000400fd2 <+197>:   retq
End of assembler dump.

//Since the input is less than 7, we pass that test too.
//Going to the next compare statement.

(gdb) u *0x0000000000400fae
0x0000000000400fae in phase_3 ()
(gdb) disas
Dump of assembler code for function phase_3:
   0x0000000000400f0d <+0>:     sub    $0x18,%rsp
   0x0000000000400f11 <+4>:     mov    %fs:0x28,%rax
   0x0000000000400f1a <+13>:    mov    %rax,0x8(%rsp)
   0x0000000000400f1f <+18>:    xor    %eax,%eax
   0x0000000000400f21 <+20>:    lea    0x4(%rsp),%rcx
   0x0000000000400f26 <+25>:    mov    %rsp,%rdx
   0x0000000000400f29 <+28>:    mov    $0x4025b7,%esi
   0x0000000000400f2e <+33>:    callq  0x400bb0 <__isoc99_sscanf@plt>
   0x0000000000400f33 <+38>:    cmp    $0x1,%eax
   0x0000000000400f36 <+41>:    jg     0x400f3d <phase_3+48>
   0x0000000000400f38 <+43>:    callq  0x401438 <explode_bomb>
   0x0000000000400f3d <+48>:    cmpl   $0x7,(%rsp)
   0x0000000000400f41 <+52>:    ja     0x400f9e <phase_3+145>
   0x0000000000400f43 <+54>:    mov    (%rsp),%eax
   0x0000000000400f46 <+57>:    jmpq   *0x402400(,%rax,8)
   0x0000000000400f4d <+64>:    mov    $0x380,%eax
   0x0000000000400f52 <+69>:    jmp    0x400f59 <phase_3+76>
   0x0000000000400f54 <+71>:    mov    $0x0,%eax
   0x0000000000400f59 <+76>:    sub    $0x3e4,%eax
   0x0000000000400f5e <+81>:    jmp    0x400f65 <phase_3+88>
   0x0000000000400f60 <+83>:    mov    $0x0,%eax
   0x0000000000400f65 <+88>:    add    $0x21e,%eax
   0x0000000000400f6a <+93>:    jmp    0x400f71 <phase_3+100>
   0x0000000000400f6c <+95>:    mov    $0x0,%eax
   0x0000000000400f71 <+100>:   sub    $0x34,%eax
   0x0000000000400f74 <+103>:   jmp    0x400f7b <phase_3+110>
   0x0000000000400f76 <+105>:   mov    $0x0,%eax
   0x0000000000400f7b <+110>:   add    $0x34,%eax
   0x0000000000400f7e <+113>:   jmp    0x400f85 <phase_3+120>
   0x0000000000400f80 <+115>:   mov    $0x0,%eax
   0x0000000000400f85 <+120>:   sub    $0x34,%eax
   0x0000000000400f88 <+123>:   jmp    0x400f8f <phase_3+130>
   0x0000000000400f8a <+125>:   mov    $0x0,%eax
   0x0000000000400f8f <+130>:   add    $0x34,%eax
   0x0000000000400f92 <+133>:   jmp    0x400f99 <phase_3+140>
   0x0000000000400f94 <+135>:   mov    $0x0,%eax
   0x0000000000400f99 <+140>:   sub    $0x34,%eax
   0x0000000000400f9c <+143>:   jmp    0x400fa8 <phase_3+155>
   0x0000000000400f9e <+145>:   callq  0x401438 <explode_bomb>
   0x0000000000400fa3 <+150>:   mov    $0x0,%eax
   0x0000000000400fa8 <+155>:   cmpl   $0x5,(%rsp)
   0x0000000000400fac <+159>:   jg     0x400fb4 <phase_3+167>
=> 0x0000000000400fae <+161>:   cmp    0x4(%rsp),%eax
   0x0000000000400fb2 <+165>:   je     0x400fb9 <phase_3+172>
   0x0000000000400fb4 <+167>:   callq  0x401438 <explode_bomb>
   0x0000000000400fb9 <+172>:   mov    0x8(%rsp),%rax
   0x0000000000400fbe <+177>:   xor    %fs:0x28,%rax
   0x0000000000400fc7 <+186>:   je     0x400fce <phase_3+193>
--Type <RET> for more, q to quit, c to continue without paging--
   0x0000000000400fc9 <+188>:   callq  0x400b00 <__stack_chk_fail@plt>
   0x0000000000400fce <+193>:   add    $0x18,%rsp
   0x0000000000400fd2 <+197>:   retq
End of assembler dump.
(gdb) i r
rax            0x1ea               490					//Expected answer
rbx            0x7ffffffee3b8      140737488282552			//we will check this
rcx            0x0                 0
rdx            0x7ffffffee2a4      140737488282276
rsi            0x0                 0
rdi            0x7ffffffedc50      140737488280656
rbp            0x0                 0x0
rsp            0x7ffffffee2a0      0x7ffffffee2a0
r8             0xffffffff          4294967295
r9             0x0                 0
r10            0x7fffff74eac0      140737479240384
r11            0x0                 0
r12            0x400c60            4197472
r13            0x7ffffffee3b0      140737488282544
r14            0x0                 0
r15            0x0                 0
rip            0x400fae            0x400fae <phase_3+161>
eflags         0x293               [ CF AF SF IF ]
cs             0x33                51
ss             0x2b                43
ds             0x0                 0
es             0x0                 0
fs             0x0                 0
gs             0x0                 0
(gdb) x/d $rsp+4
0x7ffffffee2a4: 35							//The second input

//Since the input does not match, the bomb will explode
//So we will try again with different input

(gdb) r
The program being debugged has been started already.
Start it from the beginning? (y or n) y
Starting program: /mnt/d/5th Semester/Computer System I (ITS304)/New folder/Assignment 1/bomb002/bomb phase1.txt
Welcome to my fiendish little bomb. You have 6 phases with
which to blow yourself up. Have a nice day!
Phase 1 defused. How about the next one?
That's number 2.  Keep going!
2 490									//Test input 3
	
Breakpoint 1, 0x0000000000400f0d in phase_3 ()
(gdb) disas
Dump of assembler code for function phase_3:
=> 0x0000000000400f0d <+0>:     sub    $0x18,%rsp
   0x0000000000400f11 <+4>:     mov    %fs:0x28,%rax
   0x0000000000400f1a <+13>:    mov    %rax,0x8(%rsp)
   0x0000000000400f1f <+18>:    xor    %eax,%eax
   0x0000000000400f21 <+20>:    lea    0x4(%rsp),%rcx
   0x0000000000400f26 <+25>:    mov    %rsp,%rdx
   0x0000000000400f29 <+28>:    mov    $0x4025b7,%esi
   0x0000000000400f2e <+33>:    callq  0x400bb0 <__isoc99_sscanf@plt>
   0x0000000000400f33 <+38>:    cmp    $0x1,%eax
   0x0000000000400f36 <+41>:    jg     0x400f3d <phase_3+48>
   0x0000000000400f38 <+43>:    callq  0x401438 <explode_bomb>
   0x0000000000400f3d <+48>:    cmpl   $0x7,(%rsp)
   0x0000000000400f41 <+52>:    ja     0x400f9e <phase_3+145>
   0x0000000000400f43 <+54>:    mov    (%rsp),%eax
   0x0000000000400f46 <+57>:    jmpq   *0x402400(,%rax,8)
   0x0000000000400f4d <+64>:    mov    $0x380,%eax
   0x0000000000400f52 <+69>:    jmp    0x400f59 <phase_3+76>
   0x0000000000400f54 <+71>:    mov    $0x0,%eax
   0x0000000000400f59 <+76>:    sub    $0x3e4,%eax
   0x0000000000400f5e <+81>:    jmp    0x400f65 <phase_3+88>
   0x0000000000400f60 <+83>:    mov    $0x0,%eax
   0x0000000000400f65 <+88>:    add    $0x21e,%eax
   0x0000000000400f6a <+93>:    jmp    0x400f71 <phase_3+100>
   0x0000000000400f6c <+95>:    mov    $0x0,%eax
   0x0000000000400f71 <+100>:   sub    $0x34,%eax
   0x0000000000400f74 <+103>:   jmp    0x400f7b <phase_3+110>
   0x0000000000400f76 <+105>:   mov    $0x0,%eax
   0x0000000000400f7b <+110>:   add    $0x34,%eax
   0x0000000000400f7e <+113>:   jmp    0x400f85 <phase_3+120>
   0x0000000000400f80 <+115>:   mov    $0x0,%eax
   0x0000000000400f85 <+120>:   sub    $0x34,%eax
   0x0000000000400f88 <+123>:   jmp    0x400f8f <phase_3+130>
   0x0000000000400f8a <+125>:   mov    $0x0,%eax
   0x0000000000400f8f <+130>:   add    $0x34,%eax
   0x0000000000400f92 <+133>:   jmp    0x400f99 <phase_3+140>
   0x0000000000400f94 <+135>:   mov    $0x0,%eax
   0x0000000000400f99 <+140>:   sub    $0x34,%eax
   0x0000000000400f9c <+143>:   jmp    0x400fa8 <phase_3+155>
   0x0000000000400f9e <+145>:   callq  0x401438 <explode_bomb>
   0x0000000000400fa3 <+150>:   mov    $0x0,%eax
   0x0000000000400fa8 <+155>:   cmpl   $0x5,(%rsp)
   0x0000000000400fac <+159>:   jg     0x400fb4 <phase_3+167>
   0x0000000000400fae <+161>:   cmp    0x4(%rsp),%eax
   0x0000000000400fb2 <+165>:   je     0x400fb9 <phase_3+172>
   0x0000000000400fb4 <+167>:   callq  0x401438 <explode_bomb>
   0x0000000000400fb9 <+172>:   mov    0x8(%rsp),%rax
   0x0000000000400fbe <+177>:   xor    %fs:0x28,%rax
   0x0000000000400fc7 <+186>:   je     0x400fce <phase_3+193>
--Type <RET> for more, q to quit, c to continue without paging--
   0x0000000000400fc9 <+188>:   callq  0x400b00 <__stack_chk_fail@plt>
   0x0000000000400fce <+193>:   add    $0x18,%rsp
   0x0000000000400fd2 <+197>:   retq
End of assembler dump.

//Since the first input, 2, was expected we will directly jump to see if the second input is correct.

(gdb) u *0x0000000000400fb2
0x0000000000400fb2 in phase_3 ()
(gdb) disas
Dump of assembler code for function phase_3:
   0x0000000000400f0d <+0>:     sub    $0x18,%rsp
   0x0000000000400f11 <+4>:     mov    %fs:0x28,%rax
   0x0000000000400f1a <+13>:    mov    %rax,0x8(%rsp)
   0x0000000000400f1f <+18>:    xor    %eax,%eax
   0x0000000000400f21 <+20>:    lea    0x4(%rsp),%rcx
   0x0000000000400f26 <+25>:    mov    %rsp,%rdx
   0x0000000000400f29 <+28>:    mov    $0x4025b7,%esi
   0x0000000000400f2e <+33>:    callq  0x400bb0 <__isoc99_sscanf@plt>
   0x0000000000400f33 <+38>:    cmp    $0x1,%eax
   0x0000000000400f36 <+41>:    jg     0x400f3d <phase_3+48>
   0x0000000000400f38 <+43>:    callq  0x401438 <explode_bomb>
   0x0000000000400f3d <+48>:    cmpl   $0x7,(%rsp)
   0x0000000000400f41 <+52>:    ja     0x400f9e <phase_3+145>
   0x0000000000400f43 <+54>:    mov    (%rsp),%eax
   0x0000000000400f46 <+57>:    jmpq   *0x402400(,%rax,8)
   0x0000000000400f4d <+64>:    mov    $0x380,%eax
   0x0000000000400f52 <+69>:    jmp    0x400f59 <phase_3+76>
   0x0000000000400f54 <+71>:    mov    $0x0,%eax
   0x0000000000400f59 <+76>:    sub    $0x3e4,%eax
   0x0000000000400f5e <+81>:    jmp    0x400f65 <phase_3+88>
   0x0000000000400f60 <+83>:    mov    $0x0,%eax
   0x0000000000400f65 <+88>:    add    $0x21e,%eax
   0x0000000000400f6a <+93>:    jmp    0x400f71 <phase_3+100>
   0x0000000000400f6c <+95>:    mov    $0x0,%eax
   0x0000000000400f71 <+100>:   sub    $0x34,%eax
   0x0000000000400f74 <+103>:   jmp    0x400f7b <phase_3+110>
   0x0000000000400f76 <+105>:   mov    $0x0,%eax
   0x0000000000400f7b <+110>:   add    $0x34,%eax
   0x0000000000400f7e <+113>:   jmp    0x400f85 <phase_3+120>
   0x0000000000400f80 <+115>:   mov    $0x0,%eax
   0x0000000000400f85 <+120>:   sub    $0x34,%eax
   0x0000000000400f88 <+123>:   jmp    0x400f8f <phase_3+130>
   0x0000000000400f8a <+125>:   mov    $0x0,%eax
   0x0000000000400f8f <+130>:   add    $0x34,%eax
   0x0000000000400f92 <+133>:   jmp    0x400f99 <phase_3+140>
   0x0000000000400f94 <+135>:   mov    $0x0,%eax
   0x0000000000400f99 <+140>:   sub    $0x34,%eax
   0x0000000000400f9c <+143>:   jmp    0x400fa8 <phase_3+155>
   0x0000000000400f9e <+145>:   callq  0x401438 <explode_bomb>
   0x0000000000400fa3 <+150>:   mov    $0x0,%eax
   0x0000000000400fa8 <+155>:   cmpl   $0x5,(%rsp)
   0x0000000000400fac <+159>:   jg     0x400fb4 <phase_3+167>
   0x0000000000400fae <+161>:   cmp    0x4(%rsp),%eax
=> 0x0000000000400fb2 <+165>:   je     0x400fb9 <phase_3+172>
   0x0000000000400fb4 <+167>:   callq  0x401438 <explode_bomb>
   0x0000000000400fb9 <+172>:   mov    0x8(%rsp),%rax
   0x0000000000400fbe <+177>:   xor    %fs:0x28,%rax
   0x0000000000400fc7 <+186>:   je     0x400fce <phase_3+193>
--Type <RET> for more, q to quit, c to continue without paging--
   0x0000000000400fc9 <+188>:   callq  0x400b00 <__stack_chk_fail@plt>
   0x0000000000400fce <+193>:   add    $0x18,%rsp
   0x0000000000400fd2 <+197>:   retq
End of assembler dump.
(gdb) ni
0x0000000000400fb9 in phase_3 ()
(gdb) disas
Dump of assembler code for function phase_3:
   0x0000000000400f0d <+0>:     sub    $0x18,%rsp
   0x0000000000400f11 <+4>:     mov    %fs:0x28,%rax
   0x0000000000400f1a <+13>:    mov    %rax,0x8(%rsp)
   0x0000000000400f1f <+18>:    xor    %eax,%eax
   0x0000000000400f21 <+20>:    lea    0x4(%rsp),%rcx
   0x0000000000400f26 <+25>:    mov    %rsp,%rdx
   0x0000000000400f29 <+28>:    mov    $0x4025b7,%esi
   0x0000000000400f2e <+33>:    callq  0x400bb0 <__isoc99_sscanf@plt>
   0x0000000000400f33 <+38>:    cmp    $0x1,%eax
   0x0000000000400f36 <+41>:    jg     0x400f3d <phase_3+48>
   0x0000000000400f38 <+43>:    callq  0x401438 <explode_bomb>
   0x0000000000400f3d <+48>:    cmpl   $0x7,(%rsp)
   0x0000000000400f41 <+52>:    ja     0x400f9e <phase_3+145>
   0x0000000000400f43 <+54>:    mov    (%rsp),%eax
   0x0000000000400f46 <+57>:    jmpq   *0x402400(,%rax,8)
   0x0000000000400f4d <+64>:    mov    $0x380,%eax
   0x0000000000400f52 <+69>:    jmp    0x400f59 <phase_3+76>
   0x0000000000400f54 <+71>:    mov    $0x0,%eax
   0x0000000000400f59 <+76>:    sub    $0x3e4,%eax
   0x0000000000400f5e <+81>:    jmp    0x400f65 <phase_3+88>
   0x0000000000400f60 <+83>:    mov    $0x0,%eax
   0x0000000000400f65 <+88>:    add    $0x21e,%eax
   0x0000000000400f6a <+93>:    jmp    0x400f71 <phase_3+100>
   0x0000000000400f6c <+95>:    mov    $0x0,%eax
   0x0000000000400f71 <+100>:   sub    $0x34,%eax
   0x0000000000400f74 <+103>:   jmp    0x400f7b <phase_3+110>
   0x0000000000400f76 <+105>:   mov    $0x0,%eax
   0x0000000000400f7b <+110>:   add    $0x34,%eax
   0x0000000000400f7e <+113>:   jmp    0x400f85 <phase_3+120>
   0x0000000000400f80 <+115>:   mov    $0x0,%eax
   0x0000000000400f85 <+120>:   sub    $0x34,%eax
   0x0000000000400f88 <+123>:   jmp    0x400f8f <phase_3+130>
   0x0000000000400f8a <+125>:   mov    $0x0,%eax
   0x0000000000400f8f <+130>:   add    $0x34,%eax
   0x0000000000400f92 <+133>:   jmp    0x400f99 <phase_3+140>
   0x0000000000400f94 <+135>:   mov    $0x0,%eax
   0x0000000000400f99 <+140>:   sub    $0x34,%eax
   0x0000000000400f9c <+143>:   jmp    0x400fa8 <phase_3+155>
   0x0000000000400f9e <+145>:   callq  0x401438 <explode_bomb>
   0x0000000000400fa3 <+150>:   mov    $0x0,%eax
   0x0000000000400fa8 <+155>:   cmpl   $0x5,(%rsp)
   0x0000000000400fac <+159>:   jg     0x400fb4 <phase_3+167>
   0x0000000000400fae <+161>:   cmp    0x4(%rsp),%eax
   0x0000000000400fb2 <+165>:   je     0x400fb9 <phase_3+172>
   0x0000000000400fb4 <+167>:   callq  0x401438 <explode_bomb>
=> 0x0000000000400fb9 <+172>:   mov    0x8(%rsp),%rax
   0x0000000000400fbe <+177>:   xor    %fs:0x28,%rax
   0x0000000000400fc7 <+186>:   je     0x400fce <phase_3+193>
--Type <RET> for more, q to quit, c to continue without paging--
   0x0000000000400fc9 <+188>:   callq  0x400b00 <__stack_chk_fail@plt>
   0x0000000000400fce <+193>:   add    $0x18,%rsp
   0x0000000000400fd2 <+197>:   retq
End of assembler dump.

//Since we jumped over the bomb, we now know that the input was correct.

//Correct answer- 2 490
